/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package igu;

import java.awt.Color;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logica.Controladora;
import logica.Reparaciones;

/**
 *
 * @author Leonardo
 */
public class ConsultarReparaciones extends javax.swing.JInternalFrame {

    Controladora control = null;
    Reparaciones rep;

    public ConsultarReparaciones() {
        control = new Controladora();
        initComponents();
        setClosable(true);
        CargarTabla("", 0);
        setGruposOpcionesPago();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jToggleButton4 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_reparaciones = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jToggleButton2 = new javax.swing.JToggleButton();
        btn_detalles = new javax.swing.JToggleButton();
        btn_eliminar = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        btn_limpiar = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        btn_equipoNoReparado = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        txt_busqueda = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        radBut_nombre = new javax.swing.JRadioButton();
        radBut_numero = new javax.swing.JRadioButton();

        jToggleButton4.setText("Cancelar Reparacion");

        tabla_reparaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla_reparaciones);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Funciones"));

        jToggleButton2.setText("Equipo Reparado");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        btn_detalles.setText("Detalles");
        btn_detalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_detallesActionPerformed(evt);
            }
        });

        btn_eliminar.setText("Eliminar Reparacion");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        jToggleButton6.setText("Editar");
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });

        btn_limpiar.setText("Limpiar");
        btn_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limpiarActionPerformed(evt);
            }
        });

        jToggleButton7.setText("AÃ±adir Observacion");
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });

        btn_equipoNoReparado.setText("Equipo No Reparado");
        btn_equipoNoReparado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_equipoNoReparadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_eliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_detalles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_limpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_equipoNoReparado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_equipoNoReparado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(btn_eliminar)
                .addGap(18, 18, 18)
                .addComponent(btn_detalles)
                .addGap(18, 18, 18)
                .addComponent(jToggleButton6)
                .addGap(18, 18, 18)
                .addComponent(jToggleButton7)
                .addGap(18, 18, 18)
                .addComponent(btn_limpiar))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar Equipo por Filtro"));

        jToggleButton1.setText("Buscar");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        radBut_nombre.setSelected(true);
        radBut_nombre.setText("Nombre Cliente");

        radBut_numero.setText("Nro Orden");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radBut_nombre)
                .addGap(18, 18, 18)
                .addComponent(radBut_numero, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 355, Short.MAX_VALUE)
                .addComponent(txt_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(radBut_numero)
                .addComponent(radBut_nombre)
                .addComponent(txt_busqueda)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        buscarPorFiltro();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void btn_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limpiarActionPerformed
        CargarTabla("", 0);
    }//GEN-LAST:event_btn_limpiarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        eliminarReparacion();
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        registarEquipoReparado();
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void btn_equipoNoReparadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_equipoNoReparadoActionPerformed
        registarEquipoNoReparado();
    }//GEN-LAST:event_btn_equipoNoReparadoActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
        registrarObservacion();
    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void btn_detallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_detallesActionPerformed
        consultarDetalles();
    }//GEN-LAST:event_btn_detallesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btn_detalles;
    private javax.swing.JToggleButton btn_eliminar;
    private javax.swing.JToggleButton btn_equipoNoReparado;
    private javax.swing.JToggleButton btn_limpiar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JRadioButton radBut_nombre;
    private javax.swing.JRadioButton radBut_numero;
    private javax.swing.JTable tabla_reparaciones;
    private javax.swing.JTextField txt_busqueda;
    // End of variables declaration//GEN-END:variables
private void CargarTabla(String nombreBuscado, Integer idBuscado) {
        DefaultTableModel modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        String[] titulos = {"ID", "Fecha Ingreso", "Fecha Retiro", "Nombre", "Numero", "Descripcion", "Observaciones", "Total"};
        modeloTabla.setColumnIdentifiers(titulos);

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        List<Reparaciones> listaReparaciones = new ArrayList<>();

        // ð LÃ³gica para decidir quÃ© buscar
        if (nombreBuscado != null && !nombreBuscado.trim().isEmpty()) {
            listaReparaciones = control.traerReparacionesPorNombre(nombreBuscado);
        } else if (idBuscado != null && idBuscado != 0) {
            Reparaciones rep = control.traerReparacionesBuscado(idBuscado);
            if (rep != null) {
                listaReparaciones.add(rep); 
            }
        } else {
            listaReparaciones = control.traerReparaciones();
        }

        // ð Carga de datos en la tabla
        for (Reparaciones rep : listaReparaciones) {
            if (!rep.isEntregado()) {
                String fechaIngreso = rep.getFechaIngreso() != null ? sdf.format(rep.getFechaIngreso()) : "";
                String fechaRetiro = rep.getFechaRetiro() != null ? sdf.format(rep.getFechaRetiro()) : "";

                Object[] fila = {
                    rep.getId(),
                    fechaIngreso,
                    fechaRetiro,
                    rep.getNombre(),
                    rep.getNumero(),
                    rep.getDescripcion(),
                    rep.getObservaciones(),
                    rep.getTotal()
                };

                modeloTabla.addRow(fila);
            }
        }

        tabla_reparaciones.setModel(modeloTabla);

        // ð¨ Renderizador para 3 estados (0, 1, 2)
        DefaultTableCellRenderer renderizador = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {

                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                Integer estadoReparacion = null;
                try {
                    int modelRow = tabla_reparaciones.convertRowIndexToModel(row);
                    int id = (int) tabla_reparaciones.getModel().getValueAt(modelRow, 0);
                    Reparaciones rep = control.traerReparacionesBuscado(id);
                    estadoReparacion = rep != null ? rep.getReparado() : null;
                    // getEstadoReparacion() deberÃ­a devolver un int (0, 1 o 2) o null
                } catch (Exception e) {
                    // Ignorar errores
                }

                if (estadoReparacion != null) {
                    switch (estadoReparacion) {
                        case 1: // Reparado
                            c.setBackground(Color.GREEN);
                            c.setForeground(Color.BLACK);
                            break;
                        case 2: // No reparado pero listo
                            c.setBackground(Color.ORANGE);
                            c.setForeground(Color.BLACK);
                            break;
                        case 0: // Registrado

                        default:
                            c.setBackground(Color.WHITE);
                            c.setForeground(Color.BLACK);
                            break;
                    }
                } else {
                    c.setBackground(isSelected ? table.getSelectionBackground() : Color.WHITE);
                    c.setForeground(Color.BLACK);
                }

                return c;
            }
        };

        // Aplicar renderizador a todas las columnas
        for (int i = 0; i < tabla_reparaciones.getColumnCount(); i++) {
            tabla_reparaciones.getColumnModel().getColumn(i).setCellRenderer(renderizador);
        }
    }

    public void setGruposOpcionesPago() {
        buttonGroup1.add(radBut_nombre);
        buttonGroup1.add(radBut_numero);
    }

    private void buscarPorFiltro() {
        if (radBut_nombre.isSelected()) {
            CargarTabla(txt_busqueda.getText(), 0);
        } else if (radBut_numero.isSelected()) {
            String textoBuscado = txt_busqueda.getText();
            int idBuscado = 0;

            try {
                idBuscado = Integer.parseInt(textoBuscado);
                CargarTabla("", idBuscado);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un nÃºmero vÃ¡lido para buscar por ID");
            }
        }

    }

    private boolean seleccionarReparacion() {
        // Verificar si la tabla no estÃ¡ vacÃ­a
        if (tabla_reparaciones.getRowCount() > 0) {
            // Verificar si se ha seleccionado una fila
            if (tabla_reparaciones.getSelectedRow() != -1) {

                int id_rep = Integer.parseInt(String.valueOf(
                        tabla_reparaciones.getValueAt(tabla_reparaciones.getSelectedRow(), 0)
                ));

                // Traer la reparaciÃ³n desde el controlador
                this.rep = control.traerReparacionesBuscado(id_rep);

                // Verificar que no sea null
                if (rep == null) {
                    JOptionPane.showMessageDialog(this, "No se encontrÃ³ la reparaciÃ³n con ese ID.");
                    return false;
                }

                return true;
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un item a eliminar");
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay elementos");
            return false;
        }
    }

    private void eliminarReparacion() {
        boolean reparacionSeleccionada = seleccionarReparacion();

        if (reparacionSeleccionada) {
            int confirmacion = JOptionPane.showConfirmDialog(
                    this,
                    "Â¿EstÃ¡ seguro que desea eliminar la reparaciÃ³n con ID: " + rep.getId() + " del cliente:" + rep.getNombre() + " seleccionada?",
                    "Confirmar eliminaciÃ³n",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (confirmacion == JOptionPane.YES_OPTION) {
                control.EliminarReparacion(rep.getId());
                JOptionPane.showMessageDialog(this, "ReparaciÃ³n eliminada correctamente.");
                CargarTabla("", 0);
            }
        }
    }

    //Codidos: 0 (Ingreso) , 1 (Reparado) , 2 (No reparado)
    private void registarEquipoReparado() {
        boolean reparacionSeleccionada = seleccionarReparacion();

        if (reparacionSeleccionada) {
            int confirmacion = JOptionPane.showConfirmDialog(
                    this,
                    "Â¿El equipo seleccionado es: ID: " + rep.getId() + " del cliente:" + rep.getNombre() + " esta reparado?",
                    "Confirmar reparacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (confirmacion == JOptionPane.YES_OPTION) {
                this.rep.setReparado(1);
                control.actualizarReparacionAReparada(this.rep);
                JOptionPane.showMessageDialog(this, "ReparaciÃ³n registrada como reparada correctamente.");
                CargarTabla("", 0);
            }
        }
    }

    private void registarEquipoNoReparado() {
        boolean reparacionSeleccionada = seleccionarReparacion();

        if (reparacionSeleccionada) {
            int confirmacion = JOptionPane.showConfirmDialog(
                    this,
                    "Â¿El equipo seleccionado es: ID: " + rep.getId() + " del cliente:" + rep.getNombre() + " NO esta reparado?",
                    "Confirmar reparacion insatisfactoria",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (confirmacion == JOptionPane.YES_OPTION) {
                this.rep.setReparado(2);
                control.actualizarReparacionAReparada(this.rep);
                JOptionPane.showMessageDialog(this, "Registrado correctamente.");
                CargarTabla("", 0);
            }
        }
    }

    private void registrarObservacion() {
        boolean reparacionSeleccionada = seleccionarReparacion();

        if (reparacionSeleccionada) {
            int confirmacion = JOptionPane.showConfirmDialog(
                    this,
                    "Â¿El equipo seleccionado es: ID: " + rep.getId() + " del cliente: " + rep.getNombre() + "?\nÂ¿Quiere aÃ±adirle una observaciÃ³n?",
                    "Confirmar",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (confirmacion == JOptionPane.YES_OPTION) {
                // ð Mostrar cuadro de texto para ingresar observaciÃ³n
                String observacion = JOptionPane.showInputDialog(
                        this,
                        "Ingrese la observaciÃ³n para este equipo:",
                        rep.getObservaciones() != null ? rep.getObservaciones() : "" // valor por defecto
                );

                // Solo si el usuario no cancelÃ³
                if (observacion != null) {
                    this.rep.setObservaciones(observacion.trim());
                    control.actualizarReparacionAReparada(this.rep);
                    JOptionPane.showMessageDialog(this, "ObservaciÃ³n registrada correctamente.");
                    CargarTabla("", 0);
                }
            }
        }
    }

    private void consultarDetalles() {
        boolean reparacionSeleccionada = seleccionarReparacion();

        if (reparacionSeleccionada) {
            RegistrarReparaciones regFrame = new RegistrarReparaciones();
            regFrame.cargarDatos(
                    this.rep.getId(),
                    this.rep.getNombre(),
                    this.rep.getNumero(),
                    this.rep.getDescripcion(),
                    this.rep.getEquipoEncendido(),
                    this.rep.getModuloSano(),
                    this.rep.getSIM(),
                    this.rep.getBandejaSim(),
                    this.rep.getBateria(),
                    this.rep.getTapa(),
                    this.rep.getFechaIngreso(),
                    this.rep.getFechaRetiro(),
                    this.rep.getReparacionRealizada(),
                    this.rep.getFormaPago(),
                    this.rep.getCostoRepuesto(),
                    this.rep.isEntregado(),
                    this.rep.getReparado(),
                    this.rep.getObservaciones(),
                    this.rep.getTotal(),
                    true //deshabilita los campos
            );

            // Obtener la ventana principal
            Principal principal = (Principal) javax.swing.SwingUtilities.getWindowAncestor(this);

            // Agregar el InternalFrame al JDesktopPane
            principal.getVentanaPrincipal().add(regFrame);

            regFrame.setVisible(true);
            try {
                regFrame.setSelected(true);
            } catch (java.beans.PropertyVetoException e) {
                e.printStackTrace();
            }
        }
    }

}
